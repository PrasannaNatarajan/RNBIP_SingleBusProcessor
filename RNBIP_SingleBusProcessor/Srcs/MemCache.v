`timescale 1ns / 1ps

module MemCache(
    input [7:0] Address,
    inout [7:0] DataBus,
    input RD,
    input WR,
    input sClk    
    );
    
    reg [7:0] blockMem[255:0];
    //reg [7:0]outHold;
    
    assign DataBus  = (RD)?blockMem[Address] : 8'hzz;
    
    
    always @(posedge sClk )begin
        if (WR) 
            blockMem[Address] <= DataBus;
   end
    
    initial begin
        blockMem[0] = 8'h01;
        blockMem[1] = 8'h58;
        blockMem[2] = 8'hAA;
        blockMem[3] = 8'h00;
        blockMem[4] = 8'h60;
        blockMem[5] = 8'h60;
        blockMem[6] = 8'h00;
        blockMem[7] = 8'h70;
        blockMem[8] = 8'h40;
        blockMem[9] = 8'h0;
        blockMem[10] = 8'h0;
        blockMem[11] = 8'h0;
        blockMem[12] = 8'h0;
        blockMem[13] = 8'h0;
        blockMem[14] = 8'h0;
        blockMem[15] = 8'h0;
        blockMem[16] = 8'h0;
        blockMem[17] = 8'h0;
        blockMem[18] = 8'h0;
        blockMem[19] = 8'h0;
        blockMem[20] = 8'h0;
        blockMem[21] = 8'h0;
        blockMem[22] = 8'h0;
        blockMem[23] = 8'h0;
        blockMem[24] = 8'h0;
        blockMem[25] = 8'h0;
        blockMem[26] = 8'h0;
        blockMem[27] = 8'h0;
        blockMem[28] = 8'h0;
        blockMem[29] = 8'h0;
        blockMem[30] = 8'h0;
        blockMem[31] = 8'h0;
        blockMem[32] = 8'h0;
        blockMem[33] = 8'h0;
        blockMem[34] = 8'h0;
        blockMem[35] = 8'h0;
        blockMem[36] = 8'h0;
        blockMem[37] = 8'h0;
        blockMem[38] = 8'h0;
        blockMem[39] = 8'h0;
        blockMem[40] = 8'h0;
        blockMem[41] = 8'h0;
        blockMem[42] = 8'h0;
        blockMem[43] = 8'h0;
        blockMem[44] = 8'h0;
        blockMem[45] = 8'h0;
        blockMem[46] = 8'h0;
        blockMem[47] = 8'h0;
        blockMem[48] = 8'h0;
        blockMem[49] = 8'h0;
        blockMem[50] = 8'h0;
        blockMem[51] = 8'h0;
        blockMem[52] = 8'h0;
        blockMem[53] = 8'h0;
        blockMem[54] = 8'h0;
        blockMem[55] = 8'h0;
        blockMem[56] = 8'h0;
        blockMem[57] = 8'h0;
        blockMem[58] = 8'h0;
        blockMem[59] = 8'h0;
        blockMem[60] = 8'h0;
        blockMem[61] = 8'h0;
        blockMem[62] = 8'h0;
        blockMem[63] = 8'h0;
        blockMem[64] = 8'h0;
        blockMem[65] = 8'h0;
        blockMem[66] = 8'h0;
        blockMem[67] = 8'h0;
        blockMem[68] = 8'h0;
        blockMem[69] = 8'h0;
        blockMem[70] = 8'h0;
        blockMem[71] = 8'h0;
        blockMem[72] = 8'h0;
        blockMem[73] = 8'h0;
        blockMem[74] = 8'h0;
        blockMem[75] = 8'h0;
        blockMem[76] = 8'h0;
        blockMem[77] = 8'h0;
        blockMem[78] = 8'h0;
        blockMem[79] = 8'h0;
        blockMem[80] = 8'h0;
        blockMem[81] = 8'h0;
        blockMem[82] = 8'h0;
        blockMem[83] = 8'h0;
        blockMem[84] = 8'h0;
        blockMem[85] = 8'h0;
        blockMem[86] = 8'h0;
        blockMem[87] = 8'h0;
        blockMem[88] = 8'h0;
        blockMem[89] = 8'h0;
        blockMem[90] = 8'h0;
        blockMem[91] = 8'h0;
        blockMem[92] = 8'h0;
        blockMem[93] = 8'h0;
        blockMem[94] = 8'h0;
        blockMem[95] = 8'h0;
        blockMem[96] = 8'h0;
        blockMem[97] = 8'h0;
        blockMem[98] = 8'h0;
        blockMem[99] = 8'h0;
        blockMem[100] =8'h0;
        blockMem[101] =8'h0;
        blockMem[102] =8'h0;
        blockMem[103] =8'h0;
        blockMem[104] =8'h0;
        blockMem[105] =8'h0;
        blockMem[106] =8'h0;
        blockMem[107] =8'h0;
        blockMem[108] =8'h0;
        blockMem[109] =8'h0;
        blockMem[110] =8'h0;
        blockMem[111] =8'h0;
        blockMem[112] =8'h0;
        blockMem[113] =8'h0;
        blockMem[114] =8'h0;
        blockMem[115] =8'h0;
        blockMem[116] =8'h0;
        blockMem[117] =8'h0;
        blockMem[118] =8'h0;
        blockMem[119] =8'h0;
        blockMem[120] =8'h0;
        blockMem[121] =8'h0;
        blockMem[122] =8'h0;
        blockMem[123] =8'h0;
        blockMem[124] =8'h0;
        blockMem[125] =8'h0;
        blockMem[126] =8'h0;
        blockMem[127] =8'h0;
        blockMem[128] =8'h0;
        blockMem[129] =8'h0;
        blockMem[130] =8'h0;
        blockMem[131] =8'h0;
        blockMem[132] =8'h0;
        blockMem[133] =8'h0;
        blockMem[134] =8'h0;
        blockMem[135] =8'h0;
        blockMem[136] =8'h0;
        blockMem[137] =8'h0;
        blockMem[138] =8'h0;
        blockMem[139] =8'h0;
        blockMem[140] =8'h0;
        blockMem[141] =8'h0;
        blockMem[142] =8'h0;
        blockMem[143] =8'h0;
        blockMem[144] =8'h0;
        blockMem[145] =8'h0;
        blockMem[146] =8'h0;
        blockMem[147] =8'h0;
        blockMem[148] =8'h0;
        blockMem[149] =8'h0;
        blockMem[150] =8'h0;
        blockMem[151] =8'h0;
        blockMem[152] =8'h0;
        blockMem[153] =8'h0;
        blockMem[154] =8'h0;
        blockMem[155] =8'h0;
        blockMem[156] =8'h0;
        blockMem[157] =8'h0;
        blockMem[158] =8'h0;
        blockMem[159] =8'h0;
        blockMem[160] =8'h0;
        blockMem[161] =8'h0;
        blockMem[162] =8'h0;
        blockMem[163] =8'h0;
        blockMem[164] =8'h0;
        blockMem[165] =8'h0;
        blockMem[166] =8'h0;
        blockMem[167] =8'h0;
        blockMem[168] =8'h0;
        blockMem[169] =8'h0;
        blockMem[170] =8'h0;
        blockMem[171] =8'h0;
        blockMem[172] =8'h0;
        blockMem[173] =8'h0;
        blockMem[174] =8'h0;
        blockMem[175] =8'h0;
        blockMem[176] =8'h0;
        blockMem[177] =8'h0;
        blockMem[178] =8'h0;
        blockMem[179] =8'h0;
        blockMem[180] =8'h0;
        blockMem[181] =8'h0;
        blockMem[182] =8'h0;
        blockMem[183] =8'h0;
        blockMem[184] =8'h0;
        blockMem[185] =8'h0;
        blockMem[186] =8'h0;
        blockMem[187] =8'h0;
        blockMem[188] =8'h0;
        blockMem[189] =8'h0;
        blockMem[190] =8'h0;
        blockMem[191] =8'h0;
        blockMem[192] =8'h0;
        blockMem[193] =8'h0;
        blockMem[194] =8'h0;
        blockMem[195] =8'h0;
        blockMem[196] =8'h0;
        blockMem[197] =8'h0;
        blockMem[198] =8'h0;
        blockMem[199] =8'h0;
        blockMem[200] =8'h0;
        blockMem[201] =8'h0;
        blockMem[202] =8'h0;
        blockMem[203] =8'h0;
        blockMem[204] =8'h0;
        blockMem[205] =8'h0;
        blockMem[206] =8'h0;
        blockMem[207] =8'h0;
        blockMem[208] =8'h0;
        blockMem[209] =8'h0;
        blockMem[210] =8'h0;
        blockMem[211] =8'h0;
        blockMem[212] =8'h0;
        blockMem[213] =8'h0;
        blockMem[214] =8'h0;
        blockMem[215] =8'h0;
        blockMem[216] =8'h0;
        blockMem[217] =8'h0;
        blockMem[218] =8'h0;
        blockMem[219] =8'h0;
        blockMem[220] =8'h0;
        blockMem[221] =8'h0;
        blockMem[222] =8'h0;
        blockMem[223] =8'h0;
        blockMem[224] =8'h0;
        blockMem[225] =8'h0;
        blockMem[226] =8'h0;
        blockMem[227] =8'h0;
        blockMem[228] =8'h0;
        blockMem[229] =8'h0;
        blockMem[230] =8'h0;
        blockMem[231] =8'h0;
        blockMem[232] =8'h0;
        blockMem[233] =8'h0;
        blockMem[234] =8'h0;
        blockMem[235] =8'h0;
        blockMem[236] =8'h0;
        blockMem[237] =8'h0;
        blockMem[238] =8'h0;
        blockMem[239] =8'h0;
        blockMem[240] =8'h0;
        blockMem[241] =8'h0;
        blockMem[242] =8'h0;
        blockMem[243] =8'h0;
        blockMem[244] =8'h0;
        blockMem[245] =8'h0;
        blockMem[246] =8'h0;
        blockMem[247] =8'h0;
        blockMem[248] =8'h0;
        blockMem[249] =8'h0;
        blockMem[250] =8'h0;
        blockMem[251] =8'h0;
        blockMem[252] =8'h0;
        blockMem[253] =8'h0;
        blockMem[254] =8'h0;
        blockMem[255] =8'h0;

      //  outHold = 0;
        
    end
   
endmodule
